/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flapybird;

import clases.Circles;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class Topka extends javax.swing.JPanel implements MouseListener,KeyListener{

    /**
     * Creates new form Topka
     */
    int numBars = 200;
    Rectangle[] bars = new Rectangle[numBars];
    Circles cir;
    ArrayList <Circles> arrcir= new ArrayList();
    Font font = new Font("TimesRoman", Font.PLAIN, 40);
    Font malFont = new Font("TimesRoman", Font.BOLD, 15);
    public int HEITH_WINDOWS_TOP,HEITH_WINDOWS_DOWN;
    Point force = new Point(0, -20);
    Point scenaPos = new Point(500, 0);
    public Socket Cliente;
    boolean gameOver = false;
    boolean gameStarted = false;
    int radius = 30;
    int gravity = 9;
    Color orange = new Color(255, 87, 41), black = new Color(60, 60, 60);
    int w = this.getWidth(), h = this.getHeight();
    int cw = w/2, ch = h/2;
    int delta = 1;
    int x, y;
    Rectangle topka;
    int poeni = 0;
    int vreme = 0;
    private DataOutputStream out;
    private DataInputStream in;
    
   
    
    public Topka()
    {
        
        
           
    }
    public void main(String data_clientes){
        
            x = 150;
            y = 50;
            topka = new Rectangle(x, y, radius, radius);
            extraerdatos(data_clientes);
            kreirajScena();
            this.addMouseListener(this);
            this.addKeyListener(this);
            setFocusable(true);
            requestFocusInWindow();
            vreme = 0;
    }
    public void extraerdatos(String data_clientes){
        String [] data=data_clientes.split("\\|");
        int r,g,b;
        for (int i = 0; i < data.length; i++) {
            Circles cliente = new Circles();
            String [] extrac=data[i].split(";");
            String color=extrac[2].replaceAll("(\\()|(\\))","");
            String [] rgb=color.split(",");
            r=Integer.valueOf(rgb[0]);
            g=Integer.valueOf(rgb[1]);
            b=Integer.valueOf(rgb[2]);
            
            cliente.setId(extrac[0]);
            cliente.setCol(new Color(r,g,b));
            cliente.setClintes(extrac[3]);
            arrcir.add(cliente);
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
       // System.out.println("hola");
        
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_formMousePressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
        
   
    }//GEN-LAST:event_formKeyTyped

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
      
    }//GEN-LAST:event_formKeyReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formKeyPressed

    void dodajVreme(int v)
    {
        vreme += v;
    }
 
    void kreirajScena()
    {
        Random rand = new Random();
        int cirX=150;
        cir.setPos_X(x);
        cir.setPos_Y(y);
        
//        cir.pos_X=x;
//        cir.pos_Y=y;
               
//        for (int i = 0; i < cir.length; i++) {
//            
//               Circles fill= new Circles(cirX,50);
//               cir[i]=fill;
//               cirX=cirX-50;
//               
//        }
     
        for (int i = 0; i < numBars; i++)
        {
            int rint = rand.nextInt(20);
            int rint2 = rand.nextInt(150);
            
            Rectangle r = new Rectangle(scenaPos.x + i*500, scenaPos.y, 100 + rint, 100 + rint2);
            
            bars[i] = r;
        }
    }
    int minGap = 150;
    boolean nacrtajScena(Graphics g)
    {
        
        Random rand = new Random();
        scenaPos.x -= 1;
        Color col = g.getColor();
//        System.out.println("las Y "+topka.y+" "+scenaPos.y);
        boolean kolizija = false;
        
        for (int i = 0; i < numBars; i++)
        {
            Rectangle bar = bars[i];
            bar.x -= 1;
            Rectangle low = new Rectangle(bar);
            low.height += (h - low.y);
            low.y = bar.height + minGap;
            if (bar.intersects(topka) || low.intersects(topka)){
                        kolizija = true;
                    }else if(cir.getPos_Y() < -90){

                        kolizija = true;
                    }else{
                        if (bar.x + bar.width < topka.x)
                            poeni = i+1;
                    }
//            for (int j = 0; j < cir.length; j++) {
//                    if (bar.intersects(topka) || low.intersects(topka)){
//                        kolizija = true;
//                    }else if(cir[j].pos_Y < -90){
//
//                        kolizija = true;
//                    }else{
//                        if (bar.x + bar.width < topka.x)
//                            poeni = i+1;
//                    }
//                
//            }
            
            
            g.setColor(orange);
            g.fillRect(bar.x, bar.y, bar.width, bar.height);
            g.fillRect(low.x, low.y, low.width, low.height);
            g.setColor(Color.black);
            g.drawRect(bar.x, bar.y, bar.width, bar.height);
            g.drawRect(low.x, low.y, low.width, low.height);
        }
        g.setColor(col);
        return kolizija;
    }
    
    void updateForce()
    {
        if (force.x > 0)
        {
            force.x -= 1;
        }
        else if (force.x < 0)
        {
            force.x += 1;
        }
        if (force.y > 0)
        {
            force.y -= 1;
        }
        else if (force.y < 0)
        {
            force.y += 1;
        }
    }
    void update()
    {
        int maxY = h-topka.height;
 
        updateForce();
        //System.out.println("Force: " + force);
        topka.x += force.x;
        topka.y += (delta*gravity+force.y/2);
        if (topka.y >= maxY)
        {
            topka.y = maxY;
            gameOver = true;
            return;
        }
    }
    
    @Override
    public void paintComponent(Graphics g)
    {
        Graphics2D g2d = (Graphics2D)g;
        Color topkaBoja = new Color(0, 223, 161);
        w = this.getWidth(); h = this.getHeight();
        cw = w/2; ch = h/2;
        int bgHeight = 50;
        h -= bgHeight;
        update();
        g.setColor(black);
        g.fillRect(0, 0, w, h);
        g.setColor(orange);
        g.fillRect(0, h, w, bgHeight);
        g2d.setStroke(new BasicStroke(4));
        g.setColor(Color.black);
        g.drawLine(0, h, w, h);
        g.setColor(orange);
        gameStarted = vreme > 3000;
        if (!gameStarted)
        {
            g.setFont(font);
            String poraka = Integer.toString(4 - vreme / 1000);
            int w = g2d.getFontMetrics(font).stringWidth(poraka);
            g.drawString(poraka, cw-w/2, ch);
            return ;
        }
        
        if (gameOver)
        {
            g.setFont(font);
            String poraka = "GAME OVER";
            int w = g2d.getFontMetrics(font).stringWidth(poraka);
            g.drawString(poraka, cw-w/2, ch);
            return;
        }
        
        boolean kolizija = nacrtajScena(g);
        if (kolizija)
            gameOver = true;
        
      
               
        cir.DrawShapes(g,topka.x,topka.y);
        sendData();
        reciveData(g);
        
//        for (int i = 0; i < cir.length; i++) {
//             
//             cir[i].DrawShapes(g,topkaBoja,topka);
//         
//        }
      
             g.setFont(malFont);
             g.setColor(Color.white);
             g.drawString("Points: " + poeni, 5, 20);
    }
    public void DrawShapes(Graphics g,Color topkaBoja){
       
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        force.y += -20;
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
      
    }
         
    
    public void sendData(){
        try {
         
            out = new DataOutputStream(this.Cliente.getOutputStream());
            
            out.writeUTF(cir.getPos_X()+","+cir.getPos_Y()+","+cir.getId());

        } catch (IOException ex) {
            Logger.getLogger(Topka.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     public void reciveData(Graphics g){
        try {
            in = new DataInputStream(this.Cliente.getInputStream());
            
            String cord=in.readUTF();
            
            if(cord!=null){
                 String [] data= cord.split(",");
                 if(!data[2].equals(cir.getId())){
                      
                       int x=Integer.valueOf(data[0]);
                       int y=Integer.valueOf(data[1]);
                       arrcir.get(Integer.valueOf(data[2])).DrawShapes(g,x,y);
                 }
            
              //  System.out.println("id mas : "+arrcir.get(Integer.valueOf(data[2])).getId());
            }

//   
//            if(!data[2].equals(arrcir.get(Integer.valueOf(data[2])).getId())){
//                arrcir
//            }
       
        } catch (IOException ex) {
            Logger.getLogger(Topka.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
      
    }

    @Override
    public void keyPressed(KeyEvent e) {
       System.out.println("hola");
        if (e.getKeyCode() == KeyEvent.VK_UP){
        //Do something
           force.y += -20;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
